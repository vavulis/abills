# kern.timecounter.hardware=HPET			# Default: TSC-low
# kern.ipc.shm_use_phys=1				# Disable swapping of exchange memory								# 2016.04.28 = 1
kern.ipc.nmbclusters=3072000				# 												# 2016.05.13 = 2048000
kern.ipc.shmall=524288					# Default: 131072										# 2016.04.26 = 131072
kern.ipc.maxsockbuf=69527808				# Kernel socket buffer space									# 2016.04.21 = 16777216	 # 2016.05.04 = 46351872
kern.ipc.somaxconn=1024					# Size of the listen queue for accepting new TCP connections # Default: 256 or even 128		# 2016.05.02 = 8192
kern.maxfiles=256000					# Maximum number of files # Default: 128000
kern.maxfilesperproc=230400				# Maximum files allowed open per process # Default: 115200
# kern.ipc.maxsockets=2351796				# 												# 2016.04.21 = 783932
kern.maxvnodes=2000000
kern.ps_arg_cache_limit=4096
kern.threads.max_threads_per_proc=20000			# Default: 1500		Recommended : 40000							# 2016.05.02 = 1500
kern.random.sys.harvest.ethernet=0			# Skip feeding /dev/random from network								# 2016.04.28 = 0
kern.random.sys.harvest.point_to_point=0														# 2016.04.28 = 0
kern.random.sys.harvest.interrupt=0															# 2016.04.28 = 0
hw.intr_storm_threshold=80000				# Default 8000											# 2016.04.26 = 20000  # 2016.05.02 = 64000
net.bpf.optimize_writers=0				# if =1 dhcp do not work any more
net.bpf.bufsize=98304					# Default 16384
net.graph.maxdgram=8388608
net.graph.recvspace=8388608
net.inet.tcp.cc.algorithm=htcp				# htcp, cubic, newreno, chd
net.inet.tcp.cc.chd.use_max: 1				# Default 1
net.inet.tcp.cc.chd.queue_min: 5			# Default 5
net.inet.tcp.cc.chd.queue_threshold: 20			# Default 20
net.inet.tcp.cc.chd.pmax: 50				# Default 50
net.inet.tcp.cc.chd.loss_fair: 1			# Default 1
net.inet.tcp.cc.htcp.rtt_scaling=1			# to make congestion window increase during congestion avoidance mode invariant with respect to RTT.	# 2016.04.26 = 0
net.inet.tcp.cc.htcp.adaptive_backoff=1			# to keep network queues non-empty during congestion recovery episodes.					# 2016.04.26 = 0
net.inet.tcp.ecn.enable=0				# end-to-end notification of network congestion without dropping packets.
# net.inet.tcp.path_mtu_discovery=0
net.inet.tcp.mssdflt=1460				# Default: 536		MTU - 40								# 2016.05.09 = 8960
net.inet.tcp.minmss=1300				# Default: 216											# 2016.05.09 = 216
net.inet.tcp.maxtcptw=8191				# Maximum number of compressed TCP TIME_WAIT entries # Default: 8191				# 2016.05.14 = 40960
net.inet.tcp.sendspace=65536				# Maximum outgoing TCP datagram size [RFC1323, RFC2018 related] Default: 32768			# 2016.04.26 = 65536	# 2016.05.14 = 65536
net.inet.tcp.recvspace=65536				# Maximum incoming TCP datagram size [RFC1323, RFC2018 related] Default: 65536			# 2016.04.26 = 65536	# 2016.05.14 = 65536
net.inet.udp.recvspace=57344				#												# 2016.05.14 = 65536
net.inet.udp.maxdgram=57344				# net.inet.tcp.mssdflt x 7 < net.inet.udp.recvspace						# 2016.05.14 = 57344
net.inet.tcp.sendbuf_max=33554432			# Set tcp send-recv buf_max autotuning maximum to at least 16MB					# 2016.04.21 = 16777216
net.inet.tcp.recvbuf_max=33554432															# 2016.04.21 = 16777216
net.inet.tcp.sendbuf_auto=1				# enable send/recv autotuning
net.inet.tcp.recvbuf_auto=1
net.inet.tcp.sendbuf_inc=32768				# increase autotuning step size 								# 2016.04.26 = 1049600
net.inet.tcp.recvbuf_inc=65536																# 2016.04.26 = 1049600
net.inet.tcp.nolocaltimewait=1				# Do not create compressed TCP TIME_WAIT entries for local connections # Default: 0		# 2016.04.26 = 0
net.inet.tcp.delayed_ack=1																# 2016.04.26 = 0
net.inet.tcp.always_keepalive=1				# Default: 1 # determines whether or not the TCP implementation should attempt to detect dead TCP connections by intermittently delivering ``keepalives'' on the connection.
net.inet.tcp.hostcache.expire=3600															# 2016.05.14 = 3900
net.inet.tcp.keepinit=5000				# Timeout for establishing syn
net.inet.tcp.keepidle=10000																# 2016.04.26 = 7200000
net.inet.tcp.keepintvl=5000																# 2016.04.26 = 75000
net.inet.tcp.finwait2_timeout=6000			# Decrease to avoid flood # Default: 60000 (60 sec)
net.inet.tcp.fast_finwait2_recycle=1			# Recycle closed FIN_WAIT_2 connections faster # Default: 0
net.inet.tcp.msl=15000					# Default: 30000  # Maximum segment lifetime for TIME_WAIT connections. decrease to avoid flood # Default: 30000 (30 sec)	# 2016.05.02 = 30000
net.inet.tcp.rfc1323=1
net.inet.tcp.rfc3042=1					# Enhancing TCP Loss Recovery (rfc3042) says on packet loss, trigger the fast retransmit algorithm instead of tcp timeout.	# 2016.04.26 = 0
net.inet.tcp.rfc3390=1
net.inet.tcp.syncache.rexmtlimit=3			# Default: 3											# 2016.05.02 = 3
net.inet.tcp.tso=0					# Default: 1											# 2016.05.16 = 1
net.inet.tcp.icmp_may_rst=0				# icmp may not send RST to avoid spoofed icmp/udp floods # Default: 1
net.inet.tcp.blackhole=2				# drop any TCP packets to closed ports
net.inet.udp.blackhole=0				# drop any UDP packets to closed ports								# 2016.05.14 = 1
net.inet.tcp.drop_synfin=1				# drop TCP packets which have SYN and FIN set
############## https://notroot.wordpress.com/2010/10/22/freebsd-net-inet-ip-sysctls-explained/
# net.inet.ip.intr_queue_drops
net.inet.ip.check_interface=1				# Default: 0											# 2016.04.26 = 0
net.inet.ip.process_options=0				# Default: 1											# 2016.04.26 = 1
net.inet.ip.random_id=1					# Default: 0											# 2016.04.26 = 0
net.inet.ip.intr_queue_maxlen=4096															# 2016.04.26 = 12000
net.inet.ip.fw.verbose_limit=5000
net.inet.ip.fw.dyn_keepalive=0				# Default: 1											# 2016.05.07 = 1
net.inet.ip.fastforwarding=1				# =1  - ix0 traf directly out
net.inet.ip.dummynet.pipe_slot_limit=496000		# Default: 100 (2048 or 4096 - recomended)
net.inet.ip.dummynet.hash_size=65535			# Default: 64											# 2016.05.07 = 64
net.inet.ip.dummynet.io_fast=1				# Default: 0
net.inet.ip.dummynet.expire=1				# Default: 1
net.inet.ip.maxfragpackets=80000			# Default: 64000										# 2016.05.02 = 64000
net.inet.ip.redirect=1					# Enable sending IP redirects # Default: 1							# 2016.05.12 = 0
net.inet.ip.rtmaxcache=4096
net.inet.ip.rtexpire=10					# Default: 3600											# 2016.05.09 = 3600
net.inet.ip.sendsourcequench=0
net.inet.ip.ttl=64					# For windows 128	# Default: 64
net.inet.raw.maxdgram=16384				# Sendmsg() cat't send messages more than maxdgram length. Default value causes					# 2016.04.21 = 9000
net.inet.raw.recvspace=16384				# routing software to fail with OSPF if jumbo frames is turned on. # Default is 9216 , recomended 16384		# 2016.04.26 = 9000
net.inet.icmp.icmplim=25000				# Maximum number of ICMP responses per second # Default: 200							# 2016.05.02 = 2500
net.inet.icmp.drop_redirect=1				# Ignore ICMP redirects # Default: 0										# 2016.04.26 = 0
net.inet.icmp.log_redirect=0
#net.inet6.ip6.redirect=0				# Enable sending IPv6 redirects # Default: 1
net.isr.dispatch=direct					# direct, hybrid, deferred
net.link.ether.inet.max_age=100				# ARP entry lifetime in seconds - decrease to avoid ARP flood # Default: 1200
net.local.stream.sendspace=16384			# Set send-recv local.stream optimized. (10x (mtu 9000+40)) # Default: 8192					# 2016.04.26 = 65536
net.local.stream.recvspace=16384																	# 2016.04.26 = 65536
net.route.netisr_maxqlen=4096				# Bump it to 2048 or higher value. This can affect you iff you're doing shaping.				# 2016.04.26 = 12000
vfs.zfs.prefetch_disable=0

### Intel ixgbe  <----- post it to the /boot/loader.conf
#kern.ipc.nmbclusters=262144				# Default: 32768
#kern.ipc.nmbjumbop=262144				# Default: 32768
###

#			       Some defaults	Optimized FreeNAS
# net.inet.tcp.delayed_ack     = 1		0
# net.inet.tcp.sendspace       = 32768		65536
# net.inet.tcp.recvspace       = 65536		65536
# net.inet.udp.recvspace       = 42080		65536
# net.inet.udp.maxdgram        = 9216		57344
# net.local.stream.recvspace   = 8192		65535
# net.local.stream.sendspace   = 8192		65535
# kern.ipc.maxsockbuf          = 262144		2097152
# kern.ipc.somaxconn           = 128		8192
# kern.ipc.maxsockets          = 3072		16424
# kern.ipc.nmbclusters         = 3072		60000
# kern.maxfiles                = 1064		65536
# kern.maxfilesperproc         = 957		32768
# net.inet.tcp.inflight.enable = 1		0

#kern.ipc.shmmax=67108864
#kern.threads.max_threads_per_proc=4096
#kern.threads.max_threads_per_proc=1500
#kern.ipc.shm_use_phys=1				# No WIRED ram to SWAP
#net.inet.ip.rtmaxcache=4096
#net.inet.ip.rtmaxcache=128
#net.inet.ip.rtminexpire=2
#net.inet.ip.rtminexpire=10
#net.link.ether.ipfw=0					# if 1 - Enable MAC ipfw filtering

# Use the H-TCP congestion control algorithm which is more aggressive pushing
# up to max bandwidth (total BDP) and favors hosts with lower TTL / VARTTL then
# the default "newreno". Understand "newreno" works well in most conditions and
# enabling HTCP may only gain a you few percentage points of throughput. We
# suggest testing both, but we prefer HTCP.
# http://www.sigcomm.org/sites/default/files/ccr/papers/2008/July/1384609-1384613.pdf
# make sure to also add 'cc_htcp_load="YES"' to /boot/loader.conf then check
# available congestion control options with "sysctl net.inet.tcp.cc.available"
#    net.inet.tcp.cc.htcp.rtt_scaling=0                    Default is 0 (disabled).
# Controls use of the RTT scaling algorithm, which is designed to make congestion
# window increase during congestion avoidance mode invariant with respect to RTT.
#    net.inet.tcp.cc.htcp.adaptive_backoff=0               Default is 0 (disabled).
# Controls use of the adaptive backoff algorithm, which is designed to keep network
# queues non-empty during congestion recovery episodes.
#    net.inet.tcp.ecn.enable=0                             Default is 0 (disabled).
# ECN allows end-to-end notification of network congestion without dropping packets.
# ECN is an optional feature that is only used when both endpoints support it and
# are willing to use it.
#net.inet.tcp.ecn.enable=0
